{"version":3,"sources":["config/fbConfig.jsx","App.js","serviceWorker.js","index.js","static/images/profile.png","static/images/ring2.gif"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","fire","database","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","refs","phone_number","value","length","alert","itemsRef","push","username","deleteSubscriber","id","update","defineProperty","key","state","subscribers","loading","ref","_this2","setState","on","data","subscriber","val","keys","map","objectSpread","_this3","count","react_default","a","createElement","Fragment","className","src","image","alt","onSubmit","type","placeholder","required","minLength","maxLength","size","gif","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.c3d0a9c7.chunk.js","sourcesContent":["import firebase from \"firebase\";\nvar config = {\n  apiKey: \"AIzaSyCbixkqPpE8zrHrJeJtpFiv3l8h8FhRqv8\",\n  authDomain: \"phonedirectory-cf402.firebaseapp.com\",\n  databaseURL: \"https://phonedirectory-cf402.firebaseio.com\",\n  projectId: \"phonedirectory-cf402\",\n  storageBucket: \"phonedirectory-cf402.appspot.com\",\n  messagingSenderId: \"1004885701681\"\n};\nfirebase.initializeApp(config);\n\nvar fire = firebase.database();\nexport { fire };\n","import React, { Component } from \"react\";\nimport { fire } from \"./config/fbConfig\";\nimport \"./App.css\";\nimport image from \"./static/images/profile.png\";\nimport gif from \"./static/images/ring2.gif\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subscribers: [],\n      loading: false\n    };\n\n    this.itemsRef = fire.ref(\"subscriber\");\n  }\n\n  componentDidMount() {\n    this.setState({ loading: true });\n    this.itemsRef.on(\"value\", data => {\n      var subscriber = data.val() || {};\n      var keys = Object.keys(subscriber);\n      const subscribers = keys.map(key => ({ key, ...subscriber[key] }));\n      this.setState({ subscribers, loading: false });\n    });\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    if (this.refs.phone_number.value.length !== 10) {\n      alert(\"Invalid Phone Number\");\n    } else {\n      this.itemsRef.push({\n        username: this.refs.username.value,\n        phone_number: this.refs.phone_number.value\n      });\n\n      this.refs.username.value = \"\";\n      this.refs.phone_number.value = \"\";\n    }\n  };\n\n  deleteSubscriber = id => {\n    this.itemsRef.update({\n      [id.key]: null\n    });\n  };\n\n  render() {\n    const { length: count } = this.state.subscribers;\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div>\n            <img className=\"logo\" src={image} alt=\"logo\" />\n            <h1> Phone Directory </h1>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"form-group\" id=\"spc-1\">\n                <div className=\"input-1\">\n                  <i className=\"fa fa-user\" />\n                  <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    ref=\"username\"\n                    placeholder=\"Enter name\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"form-group\">\n                <div className=\"input-1\">\n                  <i className=\"fa fa-phone\" />\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    minLength=\"10\"\n                    maxLength=\"10\"\n                    size=\"10\"\n                    ref=\"phone_number\"\n                    placeholder=\"Enter phone number\"\n                    required\n                  />\n                </div>\n              </div>\n              <button type=\"submit\" className=\"btn btn-primary\">\n                Subscribe\n              </button>\n            </form>\n          </div>\n        </div>\n        {this.state.loading ? (\n          <div className=\"gif\">\n            <img src={gif} alt=\"gif\" />\n          </div>\n        ) : count === 0 ? (\n          <p className=\"gif\">There are no subscriber in Database</p>\n        ) : (\n          <div className=\"list\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Mobile Number</th>\n                  <th />\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.subscribers.map(subscriber => (\n                  <tr key={subscriber.key}>\n                    <td>{subscriber.username}</td>\n                    <td>{subscriber.phone_number}</td>\n                    <td>\n                      <button\n                        className=\"unsubscribe--button\"\n                        onClick={() => this.deleteSubscriber(subscriber)}\n                      >\n                        Delete\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profile.a1d40c38.png\";","module.exports = __webpack_public_path__ + \"static/media/ring2.a697fcc4.gif\";"],"sourceRoot":""}